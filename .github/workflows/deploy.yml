name: Deploy to ECS Fargate with Auto Versioning

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set AWS region
        run: aws configure set region $AWS_REGION

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set image version based on git commit count
        id: set-version
        run: |
          VERSION=v$(git rev-list --count HEAD)
          echo "IMAGE_TAG=$VERSION" >> $GITHUB_ENV
          echo "ðŸŸ¢ Using image tag: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker image
        run: |
          IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}
          docker build -t $IMAGE:$IMAGE_TAG myjavaapp/
          docker push $IMAGE:$IMAGE_TAG
          echo "ðŸŸ¢ Docker image pushed: $IMAGE:$IMAGE_TAG"

      - name: Get current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ secrets.TASK_DEFINITION_NAME }} \
            > task-def.json

      - name: Create new task definition with updated image
        run: |
          IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          jq --arg IMAGE "$IMAGE" '.taskDefinition |
          {
            family: .family,
            taskRoleArn: (.taskRoleArn // ""),
            executionRoleArn: (.executionRoleArn // ""),
            networkMode: .networkMode,
            containerDefinitions: (.containerDefinitions | map(
              if .name == "Democontainer" then
                .image = $IMAGE | .memory = (.memory // 512)
              else
                .
              end
            )),
            volumes: .volumes,
            placementConstraints: .placementConstraints,
            requiresCompatibilities: .requiresCompatibilities,
            cpu: .cpu,
            memory: .memory,
            runtimePlatform: .runtimePlatform
          }' task-def.json > updated-task-def.json

          aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json \
            > new-task-def.json

          echo "NEW_REVISION=$(jq -r '.taskDefinition.revision' new-task-def.json)" >> $GITHUB_ENV

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition ${{ secrets.TASK_DEFINITION_NAME }}:$NEW_REVISION \
            --force-new-deployment
          echo "âœ… ECS service updated to new revision: $NEW_REVISION"

      - name: Wait for ECS service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }}
          echo "âœ… ECS service is stable."
