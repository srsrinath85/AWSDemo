name: Deploy to ECS Fargate

on:
  push:
    branches:
      - main  # Trigger deployment on push to the 'main' branch
  workflow_dispatch:
    inputs:
      rollback:
        description: 'Set to true to rollback to previous task definition'
        required: false
        default: 'false'
      fail:
        description: 'Set to true to force deployment failure (test rollback)'
        required: false
        default: 'false'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Debug - Verify Dockerfile in myjavaapp folder
        run: |
          echo "üß™ Checking for Dockerfile in myjavaapp..."
          ls -la myjavaapp
          if [ ! -f myjavaapp/Dockerfile ]; then
            echo "‚ùå Dockerfile not found in myjavaapp!"
            exit 1
          else
            echo "‚úÖ Dockerfile found in myjavaapp."
          fi

      - name: Debug environment variables
        run: |
          echo "AWS_REGION = ${{ secrets.AWS_REGION }}"
          echo "AWS_ACCOUNT_ID = ${{ secrets.AWS_ACCOUNT_ID }}"
          echo "ECR_REPOSITORY = ${{ secrets.ECR_REPOSITORY }}"
          echo "ECS_CLUSTER = ${{ secrets.ECS_CLUSTER }}"
          echo "ECS_SERVICE = ${{ secrets.ECS_SERVICE }}"
          echo "TASK_DEFINITION_NAME = ${{ secrets.TASK_DEFINITION_NAME }}"

      - name: Get current running task definition revision
        id: get-current-task-def
        run: |
          CURRENT_TASK_DEF=$(aws ecs describe-services \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }} \
            --region $AWS_REGION \
            --query "services[0].taskDefinition" --output text)
          echo "Current running task definition ARN: $CURRENT_TASK_DEF"
          REVISION=$(echo $CURRENT_TASK_DEF | awk -F ':' '{print $NF}')
          echo "Current revision: $REVISION"
          echo "::set-output name=revision::$REVISION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG myjavaapp/
          echo "‚úÖ Docker image built successfully: ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG"

      - name: Set AWS region
        run: |
          aws configure set region $AWS_REGION

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Tag Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker tag ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "‚úÖ Docker image tagged: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG"

      - name: Push Docker image to ECR
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "‚úÖ Docker image pushed to ECR."

      - name: Register new ECS task definition with updated image
        run: |
          IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

          TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition ${{ secrets.TASK_DEFINITION_NAME }} \
            --region $AWS_REGION)

          if [ "$TASK_DEF" == "null" ] || [ -z "$TASK_DEF" ]; then
            echo "‚ùå Task Definition not found!"
            exit 1
          fi

          NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg IMAGE "$IMAGE" '
            .taskDefinition as $td |
            {
              family: $td.family,
              taskRoleArn: $td.taskRoleArn,
              executionRoleArn: $td.executionRoleArn,
              networkMode: $td.networkMode,
              containerDefinitions: ($td.containerDefinitions | map(
                if .name == "Democontainer" then
                  .image = $IMAGE
                  | if (.memory == null and .memoryReservation == null) then .memory = 512 else . end
                else
                  .
                end
              )),
              volumes: $td.volumes,
              placementConstraints: $td.placementConstraints,
              requiresCompatibilities: $td.requiresCompatibilities,
              cpu: $td.cpu,
              memory: $td.memory,
              runtimePlatform: $td.runtimePlatform
            }
          ')

          echo "$NEW_TASK_DEF" > updated_task_def.json

          aws ecs register-task-definition \
            --region $AWS_REGION \
            --cli-input-json file://updated_task_def.json

      - name: Fail deployment intentionally (for testing rollback)
        if: ${{ github.event.inputs.fail == 'true' }}
        run: |
          echo "Intentional failure triggered"
          exit 1

      - name: Deploy ECS service with rollback on failure (always succeed)
        run: |
          set -e

          PREV_REVISION=${{ steps.get-current-task-def.outputs.revision }}

          # If manual rollback requested, rollback and exit immediately
          if [ "${{ github.event.inputs.rollback }}" = "true" ]; then
            echo "Manual rollback requested, rolling back to revision $PREV_REVISION"
            aws ecs update-service \
              --cluster ${{ secrets.ECS_CLUSTER }} \
              --service ${{ secrets.ECS_SERVICE }} \
              --task-definition ${{ secrets.TASK_DEFINITION_NAME }}:$PREV_REVISION \
              --region $AWS_REGION \
              --force-new-deployment
            echo "Rollback completed."
            exit 0
          fi

          echo "Starting ECS service update..."

          set +e
          NEW_TASK_DEF_REVISION=$(aws ecs describe-task-definition \
            --task-definition ${{ secrets.TASK_DEFINITION_NAME }} \
            --region $AWS_REGION \
            --query "taskDefinition.revision" --output text)
          NEW_TASK_DEF_REVISION_EXIT=$?
          set -e

          if [ $NEW_TASK_DEF_REVISION_EXIT -ne 0 ] || [ -z "$NEW_TASK_DEF_REVISION" ] || [ "$NEW_TASK_DEF_REVISION" == "None" ]; then
            echo "‚ùå Failed to get new task definition revision. Rolling back..."
            aws ecs update-service \
              --cluster ${{ secrets.ECS_CLUSTER }} \
              --service ${{ secrets.ECS_SERVICE }} \
              --task-definition ${{ secrets.TASK_DEFINITION_NAME }}:$PREV_REVISION \
              --region $AWS_REGION \
              --force-new-deployment
            echo "Rollback done."
            exit 0
          fi

          echo "Deploying new revision: $NEW_TASK_DEF_REVISION"

          set +e
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition ${{ secrets.TASK_DEFINITION_NAME }}:$NEW_TASK_DEF_REVISION \
            --region $AWS_REGION \
            --force-new-deployment
          DEPLOY_EXIT_CODE=$?
          set -e

          if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Deployment failed, rolling back to previous revision $PREV_REVISION..."
            aws ecs update-service \
              --cluster ${{ secrets.ECS_CLUSTER }} \
              --service ${{ secrets.ECS_SERVICE }} \
              --task-definition ${{ secrets.TASK_DEFINITION_NAME }}:$PREV_REVISION \
              --region $AWS_REGION \
              --force-new-deployment
            echo "Rollback done."
          else
            echo "‚úÖ Deployment succeeded."
          fi

          # Always exit zero so pipeline does not fail
          exit 0

      - name: Cleanup old ECR images (keep only latest 5)
        run: |
          REPO_NAME=${{ secrets.ECR_REPOSITORY }}
          REGION=$AWS_REGION
          ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}

          echo "Cleaning up old images in ECR repository $REPO_NAME except latest 5..."

          IMAGES=$(aws ecr list-images --repository-name $REPO_NAME --region $REGION --query 'imageIds[*]' --output json)
          COUNT=$(echo $IMAGES | jq length)

          if [ "$COUNT" -le 5 ]; then
            echo "5 or fewer images found, no cleanup needed."
            exit 0
          fi

          TO_DELETE=$(aws ecr list-images --repository-name $REPO_NAME --region $REGION --query 'sort_by(imageIds,&imagePushedAt)[0:-5].imageDigest' --output text)

          for digest in $TO_DELETE; do
            echo "Deleting image with digest $digest"
            aws ecr batch-delete-image --repository-name $REPO_NAME --region $REGION --image-ids imageDigest=$digest
          done

          echo "‚úÖ Cleanup completed."
