name: Deploy to ECS Fargate

on:
  push:
    branches:
      - main  # Trigger deployment on push to the 'main' branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code from GitHub repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Debug - Check Dockerfile exists
    - name: Debug - Verify Dockerfile
      run: |
        echo "🧪 Checking for Dockerfile..."
        ls -la
        if [ ! -f Dockerfile ]; then
          echo "❌ Dockerfile not found!"
          exit 1
        else
          echo "✅ Dockerfile exists."
        fi

    # Step 3: Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Step 4: Build Docker image and tag it with the Git SHA
    - name: Build Docker image
      run: |
        IMAGE_TAG=${{ github.sha }}
        docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .

        
    # Step 3: Debug environment variables
    - name: Debug environment variables
      run: |
        echo "AWS_REGION = ${{ secrets.AWS_REGION }}"
        echo "AWS_ACCOUNT_ID = ${{ secrets.AWS_ACCOUNT_ID }}"
        echo "ECR_REPOSITORY = ${{ secrets.ECR_REPOSITORY }}"
        echo "ECS_CLUSTER = ${{ secrets.ECS_CLUSTER }}"
        echo "ECS_SERVICE = ${{ secrets.ECS_SERVICE }}"
        echo "TASK_DEFINITION_NAME = ${{ secrets.TASK_DEFINITION_NAME }}"
        echo "AWS_ACCESS_KEY_ID = ${{ secrets.AWS_ACCESS_KEY_ID }}"
        echo "AWS_SECRET_ACCESS_KEY = ${{ secrets.AWS_SECRET_ACCESS_KEY }}"


    # Step 5: Log in to Amazon ECR
    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
      with:
        region: ${{ secrets.AWS_REGION }}

    # Step 6: Tag Docker image with full ECR path
    - name: Tag Docker image
      run: |
        IMAGE_TAG=${{ github.sha }}
        docker tag ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

    # Step 7: Push Docker image to Amazon ECR
    - name: Push Docker image to ECR
      run: |
        IMAGE_TAG=${{ github.sha }}
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

    # Step 8: Register new ECS task definition with updated image
    - name: Register new ECS task definition
      run: |
        IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

        TASK_DEF=$(aws ecs describe-task-definition \
          --task-definition ${{ secrets.TASK_DEFINITION_NAME }} \
          --region ${{ secrets.AWS_REGION }} \
          --query "taskDefinition")

        NEW_TASK_DEF=$(echo $TASK_DEF | jq '.taskDefinition | {family: .family, containerDefinitions: (.containerDefinitions | map(if .name=="my-java-web-app" then .image = "'"$IMAGE"'" else . end))}')

        echo $NEW_TASK_DEF > updated_task_def.json

        aws ecs register-task-definition \
          --region ${{ secrets.AWS_REGION }} \
          --cli-input-json file://updated_task_def.json

    # Step 9: Update ECS service to use the new task definition
    - name: Update ECS service
      run: |
        NEW_TASK_DEF_REVISION=$(aws ecs describe-task-definition \
          --task-definition ${{ secrets.TASK_DEFINITION_NAME }} \
          --region ${{ secrets.AWS_REGION }} \
          --query "taskDefinition.revision" \
          --output text)

        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --service ${{ secrets.ECS_SERVICE }} \
          --task-definition ${{ secrets.TASK_DEFINITION_NAME }}:$NEW_TASK_DEF_REVISION \
          --region ${{ secrets.AWS_REGION }}


