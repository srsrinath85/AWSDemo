name: Deploy to ECS Fargate with Auto Rollback

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Determine next version and unique tag
        id: version
        run: |
          REPO=${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAGS=$(aws ecr list-images --repository-name $REPO --query 'imageIds[].imageTag' --output text | tr '\t' '\n')
          VERSIONS=$(echo "$IMAGE_TAGS" | grep -Eo '^v[0-9]+' | sed 's/v//' | sort -nr)
          MAX=${VERSIONS%%$'\n'*}
          MAX=${MAX:-0}
          NEXT=$((MAX + 1))
          RANDOM=$(openssl rand -hex 3)
          NEW_TAG="v${NEXT}-${RANDOM}"
          echo "IMAGE_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "Using tag $NEW_TAG"

      - name: Build and push Docker image
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/${{ secrets.ECR_REPOSITORY }}
          docker build -t $IMAGE_URI:$IMAGE_TAG myjavaapp/
          docker push $IMAGE_URI:$IMAGE_TAG
          echo "Built and pushed: $IMAGE_URI:$IMAGE_TAG"

      - name: Fetch current task definition revision
        id: current
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.TASK_DEFINITION_NAME }} --region $AWS_REGION > td.json
          REV=$(jq -r '.taskDefinition.revision' td.json)
          echo "CURRENT_REV=$REV" >> $GITHUB_ENV

      - name: Register new task definition
        id: register
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          jq --arg IMG "$IMAGE_URI" '.taskDefinition |
            { family: .family,
              taskRoleArn: (.taskRoleArn//""),
              executionRoleArn: (.executionRoleArn//""),
              networkMode: .networkMode,
              containerDefinitions: (.containerDefinitions|map(if .name=="Democontainer" then .image=$IMG else . end)),
              volumes: .volumes,
              placementConstraints: .placementConstraints,
              requiresCompatibilities: .requiresCompatibilities,
              cpu: .cpu,
              memory: .memory,
              runtimePlatform: .runtimePlatform }' td.json > new-td.json

          aws ecs register-task-definition --cli-input-json file://new-td.json --region $AWS_REGION > reg.json
          NEW_REV=$(jq -r '.taskDefinition.revision' reg.json)
          echo "NEW_REV=$NEW_REV" >> $GITHUB_ENV

      - name: Deploy new revision
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition ${{ secrets.TASK_DEFINITION_NAME }}:$NEW_REV \
            --force-new-deployment --region $AWS_REGION

      - name: Wait for deployment
        run: |
          set -e
          aws ecs wait services-stable --cluster ${{ secrets.ECS_CLUSTER }} --services ${{ secrets.ECS_SERVICE }} --region $AWS_REGION

      - name: Smart Fallback Rollback on Failure
        if: failure()
        run: |
          echo "Deployment failed. Attempting fallback rollback..."
          FAMILY=${{ secrets.TASK_DEFINITION_NAME }}

          for ARN in $(aws ecs list-task-definitions --family-prefix $FAMILY --sort DESC --region $AWS_REGION --query 'taskDefinitionArns' --output text); do
            REV=$(echo "$ARN" | awk -F: '{print $NF}')
            IMAGE=$(aws ecs describe-task-definition --task-definition $ARN --region $AWS_REGION \
                     | jq -r '.taskDefinition.containerDefinitions[0].image')
            TAG=$(echo "$IMAGE" | awk -F: '{print $2}')

            aws ecr describe-images --repository-name $REPO --region $AWS_REGION \
              --image-ids imageTag=$TAG &> /dev/null && {
                echo "Rolling back to revision $REV (image $TAG)"
                aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} \
                  --service ${{ secrets.ECS_SERVICE }} \
                  --task-definition $FAMILY:$REV \
                  --force-new-deployment --region $AWS_REGION
                echo "Rollback successful to $REV"
                exit 0
              }
          done

          echo "No valid fallback found. Rollback failed."
          exit 1
