name: Deploy to ECS Fargate

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
      ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
      TASK_DEFINITION_NAME: ${{ secrets.TASK_DEFINITION_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set dynamic image version
        id: set-version
        run: |
          VERSION="v1.0-$(date +%Y%m%d-%H%M%S)"
          echo "IMAGE_TAG=$VERSION" >> $GITHUB_ENV
          echo "Using image tag: $VERSION"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to ECR
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG ./myjavaapp
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Get current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition $TASK_DEFINITION_NAME \
            --query "taskDefinition" > task-definition.json

      - name: Create new task definition revision
        run: |
          IMAGE="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG"

          NEW_DEF=$(jq --arg IMAGE "$IMAGE" '
            {
              family: .family,
              taskRoleArn: (.taskRoleArn // ""),
              executionRoleArn: (.executionRoleArn // ""),
              networkMode: .networkMode,
              containerDefinitions: (.containerDefinitions | map(
                if .name == "Democontainer" then
                  .image = $IMAGE
                else
                  .
                end
              )),
              volumes: .volumes,
              placementConstraints: .placementConstraints,
              requiresCompatibilities: .requiresCompatibilities,
              cpu: .cpu,
              memory: .memory,
              runtimePlatform: .runtimePlatform
            }
          ' task-definition.json)

          echo "$NEW_DEF" > new-task-def.json

          aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json > new-task-output.json

          NEW_REVISION=$(jq -r '.taskDefinition.revision' new-task-output.json)
          echo "NEW_TASK_DEF_REVISION=$NEW_REVISION" >> $GITHUB_ENV
          echo "‚úÖ Registered task definition revision: $NEW_REVISION"

      - name: Update ECS service to new task definition
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $TASK_DEFINITION_NAME:$NEW_TASK_DEF_REVISION \
            --force-new-deployment
          echo "‚úÖ ECS service updated with new task definition revision."

      - name: Wait for ECS service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE
          echo "‚úÖ ECS deployment is stable."

      - name: Cleanup old ECR images (keep last 5)
        run: |
          IMAGE_DIGESTS=$(aws ecr describe-images --repository-name $ECR_REPOSITORY \
            --query 'sort_by(imageDetails,& imagePushedAt)[].imageDigest' \
            --output text --region $AWS_REGION)

          IMAGE_ARRAY=($IMAGE_DIGESTS)
          COUNT=${#IMAGE_ARRAY[@]}

          if [ "$COUNT" -le 5 ]; then
            echo "‚úÖ Less than 5 images. Skipping cleanup."
            exit 0
          fi

          DELETE_LIST=("${IMAGE_ARRAY[@]:0:$((COUNT - 5))}")
          for DIGEST in "${DELETE_LIST[@]}"; do
            aws ecr batch-delete-image --repository-name $ECR_REPOSITORY \
              --image-ids imageDigest=$DIGEST
            echo "üóëÔ∏è Deleted old image: $DIGEST"
          done
