name: Deploy v1.0 to ECS Fargate

on:
  push:
    branches:
      - main

env:
  IMAGE_VERSION: v1.0

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      IMAGE_TAG: ${{ env.IMAGE_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Validate Dockerfile
        run: |
          if [ ! -f myjavaapp/Dockerfile ]; then
            echo "‚ùå Dockerfile not found in myjavaapp!"
            exit 1
          fi
          echo "‚úÖ Dockerfile found."

      - name: Set AWS region
        run: aws configure set region $AWS_REGION

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag and Push Docker Image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG myjavaapp/
          docker tag ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "‚úÖ Docker image pushed with tag: $IMAGE_TAG"

      - name: Get current task definition
        id: get-task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ secrets.TASK_DEFINITION_NAME }} \
            --region $AWS_REGION \
            > current_task_def.json

      - name: Create new task definition with updated image
        id: register-task-def
        run: |
          IMAGE="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG"

          NEW_TASK_DEF=$(jq --arg IMAGE "$IMAGE" '.taskDefinition |
            {
              family: .family,
              taskRoleArn: (.taskRoleArn // ""),
              executionRoleArn: (.executionRoleArn // ""),
              networkMode: .networkMode,
              containerDefinitions: (.containerDefinitions | map(
                if .name == "Democontainer" then
                  .image = $IMAGE | .memory = (.memory // 512)
                else
                  .
                end
              )),
              volumes: .volumes,
              placementConstraints: .placementConstraints,
              requiresCompatibilities: .requiresCompatibilities,
              cpu: .cpu,
              memory: .memory,
              runtimePlatform: .runtimePlatform
            }' current_task_def.json)

          echo "$NEW_TASK_DEF" > updated_task_def.json

          aws ecs register-task-definition \
            --region $AWS_REGION \
            --cli-input-json file://updated_task_def.json \
            > registered_task_def.json

          NEW_REVISION=$(jq -r '.taskDefinition.revision' registered_task_def.json)
          echo "TASK_DEF_REVISION=$NEW_REVISION" >> $GITHUB_ENV
          echo "‚úÖ Registered new task definition revision: $NEW_REVISION"

      - name: Update ECS Service with new task definition
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition ${{ secrets.TASK_DEFINITION_NAME }}:$TASK_DEF_REVISION \
            --region $AWS_REGION \
            --force-new-deployment
          echo "‚úÖ ECS Service updated to use task definition revision $TASK_DEF_REVISION"

      - name: Verify ECS Deployment
        run: |
          echo "üß™ Waiting for ECS service deployment to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }} \
            --region $AWS_REGION
          echo "‚úÖ ECS service deployment is stable."

      - name: Cleanup old ECR Images (keep latest 5)
        run: |
          echo "üßπ Cleaning up old images from ECR..."
          IMAGE_IDS=$(aws ecr describe-images --repository-name ${{ secrets.ECR_REPOSITORY }} \
            --region $AWS_REGION \
            --query 'sort_by(imageDetails,& imagePushedAt)[].imageDigest' \
            --output text)

          IMAGE_ARRAY=($IMAGE_IDS)
          COUNT=${#IMAGE_ARRAY[@]}

          if [ $COUNT -le 5 ]; then
            echo "‚úÖ Less than 5 images. No cleanup required."
            exit 0
          fi

          DELETE_DIGESTS=("${IMAGE_ARRAY[@]:0:$((COUNT - 5))}")
          for DIGEST in "${DELETE_DIGESTS[@]}"; do
            aws ecr batch-delete-image \
              --repository-name ${{ secrets.ECR_REPOSITORY }} \
              --region $AWS_REGION \
              --image-ids imageDigest=$DIGEST
            echo "üóëÔ∏è Deleted old image digest: $DIGEST"
          done
